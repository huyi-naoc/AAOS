#!/usr/bin/env python3

from optparse import OptionParser
from astropy.io import fits as pyfits

def create_template_fits_file(pathname):
    phdu = pyfits.PrimaryHDU()
    phdu.header['EXTEND'] = (True, 'FITS dataset may contain extensions')
    phdu.header['DATE'] = ('2025-01-01', 'UT date this file was written (yyyy-mm-dd)')
    phdu.header['TIME'] = ('00:00:00', 'UT time this file was written (hh:mm:ss)')
    phdu.header['NEXTEND'] = (3, 'number of standard extensions')
    phdu.header['FILENAME'] =  ('sysu80_20250101000000.fits', 'name of file')
    phdu.header['FILETYPE'] = ('SCI', 'type of data found in data file')
    phdu.header['OBSTYPE'] = ('IMAGING', 'observation type - imaging or spectroscopic')

    phdu.header['TELESCOP'] = ('SYSU80', 'telescope used to acquire data')
    phdu.header['RA'] = (1.0000000E+01, 'right ascension of pointing (deg) (J2000)')
    phdu.header['DEC'] = (1.0000000E+01, 'declination of the pointing (deg) (J2000)')
    
    phdu.header['INSTRUME'] = ('K', 'identifier for instrument used to acquire data')
    phdu.header['FILTER'] = ('K', 'filter in use')

    phdu.header['DETECTOR'] = ('XXXX', 'detector in use')
    phdu.header['NCHIP'] = (3, 'number of mosaic chips')
    phdu.header['GAIN'] = (5.00, 'requested gain (electrons/ADU)')
    phdu.header['COOLSTAT'] = (1, 'cooler status --- 0:OFF, 1:ON')
    c = pyfits.Card.fromstring('SETTEMP =    -70.0    /setting temperature at cold head (Celsius degree)')
    phdu.header.append(c)
    #phdu.header['SETTEMP'] = (-70.0, 'setting temperature at cold head (Celsius degree)')
    c = pyfits.Card.fromstring('COOLTEMP=    -70.0    /actual temperature at cold head (Celsius degree)')
    phdu.header.append(c)
    #phdu.header['COOLTEMP'] = (-70.0, 'actual temperature at cold head (Celsius degree)')
    phdu.header['CTRLTEMP'] = (-70.0, 'controller\'s temperature (Celsius degree)')
    phdu.header['HOTTEMP'] = (-30.0, 'temperature at hot end (Celsius degree)')
    phdu.header['MTRTEMP'] = (-30.0, 'temperature of motor (Celsius degree)')
    phdu.header['ENVTEMP'] = (20.0, 'ambient temperature (Celsius degree)')
    phdu.header['D1TEMP'] = (20.0, 'D1 temperature (Celsius degree)')
    phdu.header['D2TEMP'] = (20.0, 'D2 temperature (Celsius degree)')
    phdu.header['PT1TEMP'] = (20.0, 'PT1 temperature (Celsius degree)')
    phdu.header['PT2TEMP'] = (20.0, 'PT2 temperature (Celsius degree)')
    phdu.header['PT3TEMP'] = (20.0, 'PT3 temperature (Celsius degree)')
    phdu.header['PT4TEMP'] = (20.0, 'PT4 temperature (Celsius degree)')
    phdu.header['FANSPEED'] = (3, 'fan speed level')
    phdu.header['HEATPWM'] = (3, 'heat PWM (0-100)')
    phdu.header['POWER'] = (40.0, 'power of controller (Watt)')
    c = pyfits.Card.fromstring('PB24V_V =    24.0    /actual voltage of 24VDC input of the controller (V)')
    phdu.header.append(c)
    #phdu.header['PB24V_V'] = (24.0, 'actual voltage of 24VDC input of the controller (V)')
    phdu.header['PB24V_I'] = (0.5, 'current of 24VDC input of the controller (A)')
    c = pyfits.Card.fromstring('PB12V_V =    12.0    /actual voltage of 12VDC input of the controller (V)')
    phdu.header.append(c)
    #phdu.header['PB12V_V'] = (12.0, 'actual voltage of 12VDC input of the controller (V)')
    phdu.header['PB12V_I'] = (0.2, 'current of 12VDC input of the controller (A)')
    c = pyfits.Card.fromstring('PB5V_V  =    5.0    /actual voltage of 5VDC input of the controller (V)')
    phdu.header.append(c)
    #phdu.header['PB5V_V'] = (5.0, 'actual voltage of 5VDC input of the controller (V)')
    phdu.header['PB5V_I'] = (1.0, 'current of 5VDC input of the controller (A)')
    c = pyfits.Card.fromstring('PB5V_V  =    6.0    /actual voltage of 6VDC input of the controller (V)')
    phdu.header.append(c)
    #phdu.header['PB6V_V'] = (6.0, 'actual voltage of 6VDC input of the controller (V)')
    phdu.header['PB6V_I'] = (0.3, 'current of 6VDC input of the controller (A)')
    phdu.header['PR1'] = (0.03, 'pressure at PR1 (mbar)')
    phdu.header['PR2'] = (0.03, 'pressure at PR2 (mbar)')
    phdu.header['PR3'] = (0.03, 'pressure at PR3 (mbar)')
    phdu.header['PR4'] = (0.03, 'pressure at PR4 (mbar)')
    phdu.header['PR5'] = (0.03, 'pressure at PR5 (mbar)')
    
    phdu.header['TARGNAME'] = ('NGC2345', 'proposer\'s target name')
    phdu.header['RA_TARG'] = (1.0000000E+01, 'right ascension of the target (deg) (J2000)')
    phdu.header['DEC_TARG'] = (1.0000000E+01, 'declination of the target (deg) (J2000)')
    phdu.header['EQUINOX'] = (2000.0, 'equinox of celestial coord. system')
    phdu.header['RADESYS'] = ('FK5', 'celestial coord. reference system')
    phdu.header['SOURCE'] = ('EP alert', 'target source')

    phdu.header['DATE-OBS'] = ('2025-01-01', 'UT date of start of observation (yyyy-mm-dd)')
    phdu.header['TIME-OBS'] = ('00:00:00.000000', 'UT time start of observation (hh:mm:ss.ssssss)')
    phdu.header['EXPTIME'] = (20.00, 'requested exposure time (seconds)')
    phdu.header['AIRMASS'] = (1.3, 'average air mass')
    
    phdu.header['SITENAME'] = ('Lenghu', 'name of site')
    phdu.header['SITE_LAT'] = ('+352210.33', 'latitude of the site (+/-DDMMSS.SS)')
    phdu.header['SITE_LON'] = ('+0833246.22', 'logitude of the site (+/-DDDMMSS.SS)')
    phdu.header['SITE_ALT'] = (+4100.22, 'altitude of the site (m)')
    phdu.header['SITETEMP'] = (20.0, 'temperature of the site (Celsius degree)')
    phdu.header['SITE_WS'] = (6.0, 'wind speed of the site (m/s)')
    phdu.header['SITE_WD'] = (209.0, 'wind direction of the site (deg)')
    phdu.header['SITE_RH'] = (30.0, 'relative humidity of the site (%)')
    phdu.header['SITE_DP'] = (18.2, 'dew point of the site (Celsius degree)')
    phdu.header['SITE_AP'] = (623.55, 'air pressure of the site (hPa)')
    c = pyfits.Card.fromstring('SITE_BKG=    1.2    /sky backgroud near zenith of the site (mag/arc sec sq.)')
    phdu.header.append(c)
    #phdu.header['SITE_BKG'] = (1.2, 'sky backgroud near zenith of the site (mag/arc sec sq.)')
    phdu.header['SITE_SEE'] = (1.2, 'seeing of the site (arc second)')

    phdu.header.add_blank('/ TELESCOPE INFORMATION', before='TELESCOP')
    phdu.header.add_blank('/ INSTRUMENT INFORMATION', after='DEC')
    phdu.header.add_blank('/ DETECTOR INFORMATION', after='FILTER')
    phdu.header.add_blank('/ TARGET INFORMATION', after='PR5')
    phdu.header.add_blank('/ EXPOSURE INFORMATION', after='SOURCE')
    phdu.header.add_blank('/ SITE INFORMATION', after='AIRMASS')
    phdu.header.add_blank('', after='OBSTYPE')
    phdu.header.add_blank('', before='TELESCOP')
    phdu.header.add_blank('', after='DEC')
    phdu.header.add_blank('', before='INSTRUME')
    phdu.header.add_blank('', after='FILTER')
    phdu.header.add_blank('', before='DETECTOR')
    phdu.header.add_blank('', after='PR5')
    phdu.header.add_blank('', before='TARGNAME')
    phdu.header.add_blank('', after='SOURCE')
    phdu.header.add_blank('', before='DATE-OBS')
    phdu.header.add_blank('', after='AIRMASS')
    phdu.header.add_blank('', before='SITENAME')

    phdu.header.add_comment('and Astrophysics\', volume 376, page 359; bibcode: 2001A&A...376..359H', after='NEXTEND')
    phdu.header.add_comment('FITS (Flexible Image Transport System) format is defined in \'Astronomy', after='NEXTEND')

    phdu.writeto(pathname, overwrite=True)

def main():
    parser = OptionParser()
    parser.disable_interspersed_args()
    options,args = parser.parse_args()
    
    create_template_fits_file(args[0])

if __name__ == '__main__':
    main()
